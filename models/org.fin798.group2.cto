/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
* My commodity trading network
*/

namespace org.fin798.group2

enum contractState {
 o Drafted//anyone can initialize contract to be drafted
 o Active//owner of the contract can set it to active
 o Completed//contract clauses met condition
 o Signed//contract clauses met condition and signed all required participant/s
 o Void//contract state has failed and is irreversable
}

asset masterContract identified by contractID {
  o String contractID
  o contractState state
  --> commodityProducer owner
  --> OilLot oilLot 
  --> tradeAgreement tradeAgreement optional
  --> shippingTerms shippingTerms optional
  --> billofLadingTerms billofLadingTerms optional
  --> customsInspection customsInspection  optional
}

enum oilGrade {
 o ClassA
 o ClassB
 o ClassC
 o ClassD
}

asset OilLot identified by LotID {
  o String LotID
  o String description
  o Double quantity
  o oilGrade barrelGrade
  --> commodityProducer owner
}

asset tradeAgreement identified by agreementID {
  o String agreementID
  o String terms
  o contractState state
  --> commodityProducer seller
  --> commodityPurchaser buyer
}

asset shippingTerms identified by shippingID {
  o String shippingID
  o String shippingDetails
  o contractState state
  --> producerCountryOps owner
  --> commodityPurchaser validator
  --> trustedVendor[] vendors
  --> OilLot OilLot
}

asset billofLadingTerms identified by OutBoundCustomsID {
  o String OutBoundCustomsID
  o String ladingDetails
  o contractState state
  --> commodityProducer owner
  --> commodityPurchaser validator
  --> OilLot OilLot
}

asset customsInspection identified by inboundCustomsID {
  o String inboundCustomsID
  o String landingDetails
  o contractState state
  --> commodityProducer owner
  --> commodityPurchaser validator
  --> OilLot OilLot
}

participant commodityProducer identified by organizationid {
  o String organizationid 
  o String companyName
}

participant producerCountryOps identified by organizationid {
 o String organizationid 
 o String organizationInfo
}

participant commodityPurchaser identified by organizationid {
  o String organizationid 
  o String companyName
}

participant trustedVendor identified by organizationid {
 o String organizationid 
 o String organizationInfo
}

participant financialInstitution identified by organizationid {
 o String organizationid 
 o String organizationInfo
}

abstract transaction ownershipTransfer {
 --> OilLot commodity
 --> commodityPurchaser newOwner
}

transaction termsAgreement {
//This transaction updates the termsAgreement contract from active to completed
//Company Alpha is represents customs and will update contract state.
//Company Alpha signs 
 --> masterContract contractReference
}

transaction shippingAgreement {
//This transaction updates the shippingAgreement contract from active to completed
//Company Alpha is represents customs and will update contract state.
//Company Alpha signs   
 --> masterContract contractReference
}

transaction outboundCustoms extends ownershipTransfer {
//This transaction updates the billofLadingTerms contract from active to completed
//Company Alpha is represents customs and will update contract state.
//Company Alpha signs 
 --> masterContract contractReference
}

transaction inboundCustoms extends ownershipTransfer {
//This transaction updates the customsInspection contract from active to completed
//Company Alpha is represents customs and will update contract state.
//Company Alpha signs
 --> masterContract contractReference
}

event TradeNotification {
//This event is raised when a master contract state has been updated from active to completed
 --> masterContract reference
 --> financialInstitution notificationRecipient
}


/**
 * JUST FOR INITIALIZING A DEMO
 */
transaction SetupDemo {
}
